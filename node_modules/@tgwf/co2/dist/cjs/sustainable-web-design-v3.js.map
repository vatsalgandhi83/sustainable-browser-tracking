{
  "version": 3,
  "sources": ["../../src/sustainable-web-design-v3.js"],
  "sourcesContent": ["\"use strict\";\n\n/**\n * Sustainable Web Design\n *\n * Updated calculations and figures from\n * https://sustainablewebdesign.org/calculating-digital-emissions/\n *\n */\n\nimport {\n  fileSize,\n  KWH_PER_GB,\n  END_USER_DEVICE_ENERGY,\n  NETWORK_ENERGY,\n  DATACENTER_ENERGY,\n  PRODUCTION_ENERGY,\n  GLOBAL_GRID_INTENSITY,\n  RENEWABLES_GRID_INTENSITY,\n  FIRST_TIME_VIEWING_PERCENTAGE,\n  RETURNING_VISITOR_PERCENTAGE,\n  PERCENTAGE_OF_DATA_LOADED_ON_SUBSEQUENT_LOAD,\n} from \"./constants/index.js\";\nimport { formatNumber, outputRating } from \"./helpers/index.js\";\n\nclass SustainableWebDesign {\n  constructor(options) {\n    this.allowRatings = true;\n    this.options = options;\n    this.version = 3;\n  }\n\n  /**\n   * Accept a figure for bytes transferred and return an object representing\n   * the share of the total enrgy use of the entire system, broken down\n   * by each corresponding system component\n   *\n   * @param {number}  bytes - the data transferred in bytes\n   * @return {object} Object containing the energy in kilowatt hours, keyed by system component\n   */\n  energyPerByteByComponent(bytes) {\n    const transferedBytesToGb = bytes / fileSize.GIGABYTE;\n    const energyUsage = transferedBytesToGb * KWH_PER_GB;\n\n    // return the total energy, with breakdown by component\n    return {\n      consumerDeviceEnergy: energyUsage * END_USER_DEVICE_ENERGY,\n      networkEnergy: energyUsage * NETWORK_ENERGY,\n      productionEnergy: energyUsage * PRODUCTION_ENERGY,\n      dataCenterEnergy: energyUsage * DATACENTER_ENERGY,\n    };\n  }\n  /**\n   * Accept an object keys by the different system components, and\n   * return an object with the co2 figures key by the each component\n   *\n   * @param {object} energyByComponent - energy grouped by the four system components\n   * @param {number} [carbonIntensity] - carbon intensity to apply to the datacentre values\n   * @return {number} the total number in grams of CO2 equivalent emissions\n   */\n  co2byComponent(\n    energyByComponent,\n    carbonIntensity = GLOBAL_GRID_INTENSITY,\n    options = {}\n  ) {\n    let deviceCarbonIntensity = GLOBAL_GRID_INTENSITY;\n    let networkCarbonIntensity = GLOBAL_GRID_INTENSITY;\n    let dataCenterCarbonIntensity = GLOBAL_GRID_INTENSITY;\n\n    let globalEmissions = GLOBAL_GRID_INTENSITY;\n\n    if (options?.gridIntensity) {\n      const { device, network, dataCenter } = options.gridIntensity;\n\n      if (device?.value || device?.value === 0) {\n        deviceCarbonIntensity = device.value;\n      }\n      if (network?.value || network?.value === 0) {\n        networkCarbonIntensity = network.value;\n      }\n      // If the user has set a carbon intensity value for the datacentre, then that overrides everything and is used\n      if (dataCenter?.value || dataCenter?.value === 0) {\n        dataCenterCarbonIntensity = dataCenter.value;\n      }\n    }\n\n    // If the user passes in a TRUE value (green web host), then use the renewables intensity value\n    if (carbonIntensity === true) {\n      dataCenterCarbonIntensity = RENEWABLES_GRID_INTENSITY;\n    }\n\n    const returnCO2ByComponent = {};\n    for (const [key, value] of Object.entries(energyByComponent)) {\n      // we update the datacentre, as that's what we have information\n      // about.\n      if (key.startsWith(\"dataCenterEnergy\")) {\n        returnCO2ByComponent[key.replace(\"Energy\", \"CO2\")] =\n          value * dataCenterCarbonIntensity;\n      } else if (key.startsWith(\"consumerDeviceEnergy\")) {\n        returnCO2ByComponent[key.replace(\"Energy\", \"CO2\")] =\n          value * deviceCarbonIntensity;\n      } else if (key.startsWith(\"networkEnergy\")) {\n        returnCO2ByComponent[key.replace(\"Energy\", \"CO2\")] =\n          value * networkCarbonIntensity;\n      } else {\n        // Use the global intensity for the remaining segments\n        returnCO2ByComponent[key.replace(\"Energy\", \"CO2\")] =\n          value * globalEmissions;\n      }\n    }\n\n    return returnCO2ByComponent;\n  }\n\n  /**\n   * Accept a figure for bytes transferred and return a single figure for CO2\n   * emissions. Where information exists about the origin data is being\n   * fetched from, a different carbon intensity figure\n   * is applied for the data centre share of the carbon intensity.\n   *\n   * @param {number} bytes - the data transferred in bytes\n   * @param {boolean} carbonIntensity - a boolean indicating whether the data center is green or not\n   * @param {boolean} segmentResults - a boolean indicating whether to return the results broken down by component\n   * @param {boolean} ratingResults - a boolean indicating whether to return the rating based on the Sustainable Web Design Model\n   * @param {object} options - an object containing the grid intensity and first/return visitor values\n   * @return {number|object} the total number in grams of CO2 equivalent emissions, or an object containing the breakdown by component\n   */\n  perByte(\n    bytes,\n    carbonIntensity = false,\n    segmentResults = false,\n    ratingResults = false,\n    options = {}\n  ) {\n    if (bytes < 1) {\n      bytes = 0;\n    }\n\n    const energyBycomponent = this.energyPerByteByComponent(bytes, options);\n\n    // otherwise when faced with non numeric values throw an error\n    if (typeof carbonIntensity !== \"boolean\") {\n      throw new Error(\n        `perByte expects a boolean for the carbon intensity value. Received: ${carbonIntensity}`\n      );\n    }\n\n    const co2ValuesbyComponent = this.co2byComponent(\n      energyBycomponent,\n      carbonIntensity,\n      options\n    );\n\n    // pull out our values\u2026\n    const co2Values = Object.values(co2ValuesbyComponent);\n    const co2ValuesSum = co2Values.reduce(\n      (prevValue, currentValue) => prevValue + currentValue\n    );\n\n    let rating = null;\n    if (ratingResults) {\n      rating = this.ratingScale(co2ValuesSum);\n    }\n\n    if (segmentResults) {\n      if (ratingResults) {\n        return {\n          ...co2ValuesbyComponent,\n          total: co2ValuesSum,\n          rating: rating,\n        };\n      }\n\n      return { ...co2ValuesbyComponent, total: co2ValuesSum };\n    }\n\n    if (ratingResults) {\n      return { total: co2ValuesSum, rating: rating };\n    }\n\n    return co2ValuesSum;\n  }\n\n  /**\n   * Accept a figure for bytes transferred and return a single figure for CO2\n   * emissions. This method applies caching assumptions from the original Sustainable Web Design model.\n   *\n   * @param {number} bytes - the data transferred in bytes\n   * @param {boolean} carbonIntensity - a boolean indicating whether the data center is green or not\n   * @param {boolean} segmentResults - a boolean indicating whether to return the results broken down by component\n   * @param {boolean} ratingResults - a boolean indicating whether to return the rating based on the Sustainable Web Design Model\n   * @param {object} options - an object containing the grid intensity and first/return visitor values\n   * @return {number|object} the total number in grams of CO2 equivalent emissions, or an object containing the breakdown by component\n   */\n  perVisit(\n    bytes,\n    carbonIntensity = false,\n    segmentResults = false,\n    ratingResults = false,\n    options = {}\n  ) {\n    const energyBycomponent = this.energyPerVisitByComponent(bytes, options);\n\n    if (typeof carbonIntensity !== \"boolean\") {\n      // otherwise when faced with non numeric values throw an error\n      throw new Error(\n        `perVisit expects a boolean for the carbon intensity value. Received: ${carbonIntensity}`\n      );\n    }\n\n    const co2ValuesbyComponent = this.co2byComponent(\n      energyBycomponent,\n      carbonIntensity,\n      options\n    );\n\n    // pull out our values\u2026\n    const co2Values = Object.values(co2ValuesbyComponent);\n    const co2ValuesSum = co2Values.reduce(\n      (prevValue, currentValue) => prevValue + currentValue\n    );\n\n    let rating = null;\n    if (ratingResults) {\n      rating = this.ratingScale(co2ValuesSum);\n    }\n\n    if (segmentResults) {\n      if (ratingResults) {\n        return {\n          ...co2ValuesbyComponent,\n          total: co2ValuesSum,\n          rating: rating,\n        };\n      }\n      return { ...co2ValuesbyComponent, total: co2ValuesSum };\n    }\n\n    if (ratingResults) {\n      return { total: co2ValuesSum, rating: rating };\n    }\n\n    // so we can return their sum\n    return co2ValuesSum;\n  }\n\n  /**\n   * Accept a figure for bytes transferred and return the number of kilowatt hours used\n   * by the total system for this data transfer\n   *\n   * @param {number} bytes\n   * @return {number} the number of kilowatt hours used\n   */\n  energyPerByte(bytes) {\n    const energyByComponent = this.energyPerByteByComponent(bytes);\n\n    // pull out our values\u2026\n    const energyValues = Object.values(energyByComponent);\n\n    // so we can return their sum\n    return energyValues.reduce(\n      (prevValue, currentValue) => prevValue + currentValue\n    );\n  }\n\n  /**\n   * Accept a figure for bytes transferred, and return an object containing figures\n   * per system component, with the caching assumptions applied. This tries to account\n   * for webpages being loaded from a cache by browsers, so if you had a thousand page views,\n   * and tried to work out the energy per visit, the numbers would reflect the reduced amounts\n   * of transfer.\n   *\n   * @param {number} bytes - the data transferred in bytes for loading a webpage\n   * @param {number} firstView - what percentage of visits are loading this page for the first time\n   * @param {number} returnView - what percentage of visits are loading this page for subsequent times\n   * @param {number} dataReloadRatio - what percentage of a page is reloaded on each subsequent page view\n   *\n   * @return {object} Object containing the energy in kilowatt hours, keyed by system component\n   */\n  energyPerVisitByComponent(\n    bytes,\n    options = {},\n    firstView = FIRST_TIME_VIEWING_PERCENTAGE,\n    returnView = RETURNING_VISITOR_PERCENTAGE,\n    dataReloadRatio = PERCENTAGE_OF_DATA_LOADED_ON_SUBSEQUENT_LOAD\n  ) {\n    if (options.dataReloadRatio || options.dataReloadRatio === 0) {\n      dataReloadRatio = options.dataReloadRatio;\n    }\n\n    if (options.firstVisitPercentage || options.firstVisitPercentage === 0) {\n      firstView = options.firstVisitPercentage;\n    }\n\n    if (options.returnVisitPercentage || options.returnVisitPercentage === 0) {\n      returnView = options.returnVisitPercentage;\n    }\n\n    const energyBycomponent = this.energyPerByteByComponent(bytes);\n    const cacheAdjustedSegmentEnergy = {};\n\n    const energyValues = Object.values(energyBycomponent);\n\n    // for this, we want\n    for (const [key, value] of Object.entries(energyBycomponent)) {\n      // represent the first load\n      cacheAdjustedSegmentEnergy[`${key} - first`] = value * firstView;\n\n      // then represent the subsequent load\n      cacheAdjustedSegmentEnergy[`${key} - subsequent`] =\n        value * returnView * dataReloadRatio;\n    }\n\n    return cacheAdjustedSegmentEnergy;\n  }\n\n  /**\n   * Accept a figure for bytes, and return the total figure for energy per visit\n   * using the default caching assumptions for loading a single website\n   *\n   * @param {number} bytes\n   * @return {number} the total energy use for the visit, after applying the caching assumptions\n   */\n  energyPerVisit(bytes) {\n    // fetch the values using the default caching assumptions\n    // const energyValues = Object.values(this.energyPerVisitByComponent(bytes));\n\n    let firstVisits = 0;\n    let subsequentVisits = 0;\n\n    const energyBycomponent = Object.entries(\n      this.energyPerVisitByComponent(bytes)\n    );\n\n    for (const [key, val] of energyBycomponent) {\n      if (key.indexOf(\"first\") > 0) {\n        firstVisits += val;\n      }\n    }\n\n    for (const [key, val] of energyBycomponent) {\n      if (key.indexOf(\"subsequent\") > 0) {\n        subsequentVisits += val;\n      }\n    }\n\n    return firstVisits + subsequentVisits;\n  }\n\n  emissionsPerVisitInGrams(\n    energyPerVisit,\n    carbonintensity = GLOBAL_GRID_INTENSITY\n  ) {\n    return formatNumber(energyPerVisit * carbonintensity);\n  }\n\n  annualEnergyInKwh(energyPerVisit, monthlyVisitors = 1000) {\n    return energyPerVisit * monthlyVisitors * 12;\n  }\n\n  annualEmissionsInGrams(co2grams, monthlyVisitors = 1000) {\n    return co2grams * monthlyVisitors * 12;\n  }\n\n  annualSegmentEnergy(annualEnergy) {\n    return {\n      consumerDeviceEnergy: formatNumber(annualEnergy * END_USER_DEVICE_ENERGY),\n      networkEnergy: formatNumber(annualEnergy * NETWORK_ENERGY),\n      dataCenterEnergy: formatNumber(annualEnergy * DATACENTER_ENERGY),\n      productionEnergy: formatNumber(annualEnergy * PRODUCTION_ENERGY),\n    };\n  }\n\n  /**\n   * Determines the rating of a website's sustainability based on its CO2 emissions.\n   *\n   * @param {number} co2e - The CO2 emissions of the website in grams.\n   * @returns {string} The sustainability rating, ranging from \"A+\" (best) to \"F\" (worst).\n   */\n  ratingScale(co2e) {\n    return outputRating(co2e, this.version);\n  }\n}\n\nexport { SustainableWebDesign };\nexport default SustainableWebDesign;\n"],
  "mappings": "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",
  "names": []
}
