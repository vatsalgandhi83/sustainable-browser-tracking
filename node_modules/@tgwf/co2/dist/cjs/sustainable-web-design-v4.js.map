{
  "version": 3,
  "sources": ["../../src/sustainable-web-design-v4.js"],
  "sourcesContent": ["\"use strict\";\n\n/**\n * Sustainable Web Design version 4\n *\n * Updated calculations and figures from\n * https://sustainablewebdesign.org/estimating-digital-emissions/\n *\n */\n\nimport { fileSize, SWDV4 } from \"./constants/index.js\";\nimport { outputRating } from \"./helpers/index.js\";\n\nconst {\n  OPERATIONAL_KWH_PER_GB_DATACENTER,\n  OPERATIONAL_KWH_PER_GB_NETWORK,\n  OPERATIONAL_KWH_PER_GB_DEVICE,\n  EMBODIED_KWH_PER_GB_DATACENTER,\n  EMBODIED_KWH_PER_GB_NETWORK,\n  EMBODIED_KWH_PER_GB_DEVICE,\n  GLOBAL_GRID_INTENSITY,\n} = SWDV4;\n\n/**\n * Output the CO2e emissions for each system segment\n * @param {object} operationalEmissions\n * @param {object} embodiedEmissions\n * @returns {object}\n */\nfunction outputSegments(operationalEmissions, embodiedEmissions) {\n  const totalOperationalCO2e =\n    operationalEmissions.dataCenter +\n    operationalEmissions.network +\n    operationalEmissions.device;\n  const totalEmbodiedCO2e =\n    embodiedEmissions.dataCenter +\n    embodiedEmissions.network +\n    embodiedEmissions.device;\n\n  const dataCenterCO2e =\n    operationalEmissions.dataCenter + embodiedEmissions.dataCenter;\n  const networkCO2e = operationalEmissions.network + embodiedEmissions.network;\n  const consumerDeviceCO2e =\n    operationalEmissions.device + embodiedEmissions.device;\n\n  return {\n    dataCenterOperationalCO2e: operationalEmissions.dataCenter,\n    networkOperationalCO2e: operationalEmissions.network,\n    consumerDeviceOperationalCO2e: operationalEmissions.device,\n    dataCenterEmbodiedCO2e: embodiedEmissions.dataCenter,\n    networkEmbodiedCO2e: embodiedEmissions.network,\n    consumerDeviceEmbodiedCO2e: embodiedEmissions.device,\n    totalEmbodiedCO2e,\n    totalOperationalCO2e,\n    dataCenterCO2e,\n    networkCO2e,\n    consumerDeviceCO2e,\n  };\n}\n\n/**\n * Determine the green hosting factor\n * @param {boolean} green\n * @param {object} options\n * @returns {number}\n */\nfunction getGreenHostingFactor(green, options) {\n  if (green) {\n    return 1.0;\n  } else if (options?.greenHostingFactor || options?.greenHostingFactor === 0) {\n    return options.greenHostingFactor;\n  }\n  return 0;\n}\nclass SustainableWebDesign {\n  constructor(options) {\n    this.allowRatings = true;\n    this.options = options;\n    this.version = 4;\n  }\n\n  /**\n   * Calculate the operational energy of data transfer for each system segment\n   *\n   * @param {number} bytes\n   * @returns {object}\n   */\n  operationalEnergyPerSegment(bytes) {\n    const transferedBytesToGb = bytes / fileSize.GIGABYTE;\n    const dataCenter = transferedBytesToGb * OPERATIONAL_KWH_PER_GB_DATACENTER;\n    const network = transferedBytesToGb * OPERATIONAL_KWH_PER_GB_NETWORK;\n    const device = transferedBytesToGb * OPERATIONAL_KWH_PER_GB_DEVICE;\n\n    return {\n      dataCenter,\n      network,\n      device,\n    };\n  }\n\n  /**\n   * Calculate the operational emissions of data transfer for each system segment\n   *\n   * @param {number} bytes\n   * @param {object} options\n   * @returns {object}\n   */\n  operationalEmissions(bytes, options = {}) {\n    const { dataCenter, network, device } =\n      this.operationalEnergyPerSegment(bytes);\n\n    let dataCenterGridIntensity = GLOBAL_GRID_INTENSITY;\n    let networkGridIntensity = GLOBAL_GRID_INTENSITY;\n    let deviceGridIntensity = GLOBAL_GRID_INTENSITY;\n\n    if (options?.gridIntensity) {\n      const { device, network, dataCenter } = options.gridIntensity;\n\n      if (device?.value || device?.value === 0) {\n        deviceGridIntensity = device.value;\n      }\n\n      if (network?.value || network?.value === 0) {\n        networkGridIntensity = network.value;\n      }\n\n      if (dataCenter?.value || dataCenter?.value === 0) {\n        dataCenterGridIntensity = dataCenter.value;\n      }\n    }\n\n    const dataCenterEmissions = dataCenter * dataCenterGridIntensity;\n    const networkEmissions = network * networkGridIntensity;\n    const deviceEmissions = device * deviceGridIntensity;\n\n    return {\n      dataCenter: dataCenterEmissions,\n      network: networkEmissions,\n      device: deviceEmissions,\n    };\n  }\n\n  /**\n   * Calculate the embodied energy of data transfer for each system segment\n   *\n   * @param {number} bytes\n   * @returns {object}\n   */\n  embodiedEnergyPerSegment(bytes) {\n    const transferedBytesToGb = bytes / fileSize.GIGABYTE;\n    const dataCenter = transferedBytesToGb * EMBODIED_KWH_PER_GB_DATACENTER;\n    const network = transferedBytesToGb * EMBODIED_KWH_PER_GB_NETWORK;\n    const device = transferedBytesToGb * EMBODIED_KWH_PER_GB_DEVICE;\n\n    return {\n      dataCenter,\n      network,\n      device,\n    };\n  }\n\n  /**\n   * Calculate the embodied emissions of data transfer for each system segment\n   *\n   * @param {number} bytes\n   * @returns {object}\n   */\n  embodiedEmissions(bytes) {\n    const { dataCenter, network, device } =\n      this.embodiedEnergyPerSegment(bytes);\n\n    const dataCenterGridIntensity = GLOBAL_GRID_INTENSITY;\n    const networkGridIntensity = GLOBAL_GRID_INTENSITY;\n    const deviceGridIntensity = GLOBAL_GRID_INTENSITY;\n\n    // NOTE: Per the guidance in the SWDM v4, the grid intensity values for embodied emissions are fixed to the global grid intensity.\n\n    const dataCenterEmissions = dataCenter * dataCenterGridIntensity;\n    const networkEmissions = network * networkGridIntensity;\n    const deviceEmissions = device * deviceGridIntensity;\n\n    return {\n      dataCenter: dataCenterEmissions,\n      network: networkEmissions,\n      device: deviceEmissions,\n    };\n  }\n\n  // NOTE: Setting green: true should result in a greenHostingFactor of 1.0\n  perByte(\n    bytes,\n    green = false,\n    segmented = false,\n    ratingResults = false,\n    options = {}\n  ) {\n    if (bytes < 1) {\n      return 0;\n    }\n\n    const operationalEmissions = this.operationalEmissions(bytes, options);\n    const embodiedEmissions = this.embodiedEmissions(bytes);\n    const greenHostingFactor = getGreenHostingFactor(green, options);\n\n    const totalEmissions = {\n      dataCenter:\n        operationalEmissions.dataCenter * (1 - greenHostingFactor) +\n        embodiedEmissions.dataCenter,\n      network: operationalEmissions.network + embodiedEmissions.network,\n      device: operationalEmissions.device + embodiedEmissions.device,\n    };\n\n    const total =\n      totalEmissions.dataCenter +\n      totalEmissions.network +\n      totalEmissions.device;\n\n    let rating = null;\n    if (ratingResults) {\n      rating = this.ratingScale(total);\n    }\n\n    if (segmented) {\n      const segments = {\n        ...outputSegments(operationalEmissions, embodiedEmissions),\n      };\n\n      if (ratingResults) {\n        return {\n          ...segments,\n          total,\n          rating,\n        };\n      }\n      return { ...segments, total };\n    }\n\n    if (ratingResults) {\n      return { total, rating };\n    }\n\n    return total;\n  }\n\n  perVisit(\n    bytes,\n    green = false,\n    segmented = false,\n    ratingResults = false,\n    options = {}\n  ) {\n    let firstViewRatio = 1;\n    let returnViewRatio = 0;\n    let dataReloadRatio = 0;\n    const greenHostingFactor = getGreenHostingFactor(green, options);\n    const operationalEmissions = this.operationalEmissions(bytes, options);\n    const embodiedEmissions = this.embodiedEmissions(bytes);\n\n    if (bytes < 1) {\n      return 0;\n    }\n\n    if (options.firstVisitPercentage || options.firstVisitPercentage === 0) {\n      firstViewRatio = options.firstVisitPercentage;\n    }\n\n    if (options.returnVisitPercentage || options.returnVisitPercentage === 0) {\n      returnViewRatio = options.returnVisitPercentage;\n    }\n\n    // NOTE: Our current implementation of the SWDMv4 calculation diverges slightly from the original calculation that is shown on the SWDM website https://sustainablewebdesign.org/estimating-digital-emissions/\n    // The original calculation uses \"Data Cache Ratio\" representing the portion of data that is loaded from cache for returning visitors.\n    // Our implementation uses \"Data Reload Ratio\" representing the portion of data that is downloaded again for returning visitors.\n    if (options.dataReloadRatio || options.dataReloadRatio === 0) {\n      dataReloadRatio = options.dataReloadRatio;\n    }\n\n    // NOTE: First visit emissions are calculated as the sum of all three segments without any caching.\n\n    const firstVisitEmissions =\n      operationalEmissions.dataCenter * (1 - greenHostingFactor) +\n      embodiedEmissions.dataCenter +\n      operationalEmissions.network +\n      embodiedEmissions.network +\n      operationalEmissions.device +\n      embodiedEmissions.device;\n\n    // NOTE: First visit emissions are calculated as the sum of all three segments with caching applied.\n\n    const returnVisitEmissions = firstVisitEmissions * dataReloadRatio;\n\n    // NOTE: The total emissions account for the percentage of first and return visits.\n    const total =\n      firstVisitEmissions * firstViewRatio +\n      returnVisitEmissions * returnViewRatio;\n\n    let rating = null;\n    if (ratingResults) {\n      rating = this.ratingScale(total);\n    }\n\n    if (segmented) {\n      const segments = {\n        ...outputSegments(operationalEmissions, embodiedEmissions),\n        firstVisitCO2e: firstVisitEmissions,\n        returnVisitCO2e: returnVisitEmissions,\n      };\n\n      if (ratingResults) {\n        return {\n          ...segments,\n          total,\n          rating,\n        };\n      }\n\n      return { ...segments, total };\n    }\n\n    if (ratingResults) {\n      return { total, rating };\n    }\n\n    return total;\n  }\n\n  /**\n   * Determines the rating of a website's sustainability based on its CO2 emissions.\n   *\n   * @param {number} co2e - The CO2 emissions of the website in grams.\n   * @returns {string} The sustainability rating, ranging from \"A+\" (best) to \"F\" (worst).\n   */\n  ratingScale(co2e) {\n    return outputRating(co2e, this.version);\n  }\n}\n\nexport { SustainableWebDesign };\nexport default SustainableWebDesign;\n"],
  "mappings": "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",
  "names": ["device", "network", "dataCenter"]
}
