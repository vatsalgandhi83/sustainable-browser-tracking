{
  "version": 3,
  "sources": ["../../src/co2.js"],
  "sourcesContent": ["\"use strict\";\n\n/**\n * @typedef {Object} CO2EstimateTraceResultPerByte\n * @property {number|CO2EstimateComponentsPerByte} co2 - The CO2 estimate in grams or its separate components\n * @property {boolean} green - Whether the domain is green or not\n * @property {TraceResultVariablesPerByte} variables - The variables used to calculate the CO2 estimate\n */\n\n/**\n * @typedef {Object} CO2EstimateTraceResultPerVisit\n * @property {number|CO2EstimateComponentsPerVisit} co2 - The CO2 estimate in grams or its separate components\n * @property {boolean} green - Whether the domain is green or not\n * @property {TraceResultVariablesPerVisit} variables - The variables used to calculate the CO2 estimate\n */\n\n/**\n * @typedef {Object} TraceResultVariablesPerByte\n * @property {GridIntensityVariables} gridIntensity - The grid intensity related variables\n */\n/**\n * @typedef {Object} TraceResultVariablesPerVisit\n * @property {GridIntensityVariables} gridIntensity - The grid intensity related variables\n * @property {number} dataReloadRatio - What percentage of a page is reloaded on each subsequent page view\n * @property {number} firstVisitPercentage - What percentage of visits are loading this page for subsequent times\n * @property {number} returnVisitPercentage - What percentage of visits are loading this page for the second or more time\n */\n\n/**\n * @typedef {Object} GridIntensityVariables\n * @property {string} description - The description of the variables\n * @property {number} network - The network grid intensity set by the user or the default\n * @property {number} dataCenter - The data center grid intensity set by the user or the default\n * @property {number} device - The device grid intensity set by the user or the default\n * @property {number} production - The production grid intensity set by the user or the default\n */\n\n/**\n * @typedef {Object} CO2EstimateComponentsPerByte\n * @property {number} networkCO2 - The CO2 estimate for networking in grams\n * @property {number} dataCenterCO2 - The CO2 estimate for data centers in grams\n * @property {number} consumerDeviceCO2 - The CO2 estimate for consumer devices in grams\n * @property {number} productionCO2 - The CO2 estimate for device production in grams\n * @property {string} rating - The rating of the CO2 estimate based on the Sustainable Web Design Model\n * @property {number} total - The total CO2 estimate in grams\n */\n\n/**\n * @typedef {Object} CO2EstimateComponentsPerVisit\n * @property {number} 'networkCO2 - first' - The CO2 estimate for networking in grams on first visit\n * @property {number} 'networkCO2 - subsequent' - The CO2 estimate for networking in grams on subsequent visits\n * @property {number} 'dataCenterCO2 - first' - The CO2 estimate for data centers in grams on first visit\n * @property {number} 'dataCenterCO2 - subsequent' - The CO2 estimate for data centers in grams on subsequent visits\n * @property {number} 'consumerDeviceCO2 - first' - The CO2 estimate for consumer devices in grams on first visit\n * @property {number} 'consumerDeviceCO2 - subsequent' - The CO2 estimate for consumer devices in grams on subsequent visits\n * @property {number} 'productionCO2 - first' - The CO2 estimate for device production in grams on first visit\n * @property {number} 'productionCO2 - subsequent' - The CO2 estimate for device production in grams on subsequent visits\n * @property {string} rating - The rating of the CO2 estimate based on the Sustainable Web Design Model\n * @property {number} total - The total CO2 estimate in grams\n */\n\nimport OneByte from \"./1byte.js\";\nimport SustainableWebDesignV3 from \"./sustainable-web-design-v3.js\";\nimport SustainableWebDesignV4 from \"./sustainable-web-design-v4.js\";\n\nimport {\n  parseByteTraceOptions,\n  parseVisitTraceOptions,\n} from \"./helpers/index.js\";\n\nclass CO2 {\n  constructor(options) {\n    this.model = new SustainableWebDesignV3();\n    // Using optional chaining allows an empty object to be passed\n    // in without breaking the code.\n    if (options?.model === \"1byte\") {\n      this.model = new OneByte();\n    } else if (options?.model === \"swd\") {\n      this.model = new SustainableWebDesignV3();\n      if (options?.version === 4) {\n        this.model = new SustainableWebDesignV4();\n      }\n    } else if (options?.model) {\n      throw new Error(\n        `\"${options.model}\" is not a valid model. Please use \"1byte\" for the OneByte model, and \"swd\" for the Sustainable Web Design model.\\nSee https://developers.thegreenwebfoundation.org/co2js/models/ to learn more about the models available in CO2.js.`\n      );\n    }\n\n    if (options?.rating && typeof options.rating !== \"boolean\") {\n      throw new Error(\n        `The rating option must be a boolean. Please use true or false.\\nSee https://developers.thegreenwebfoundation.org/co2js/options/ to learn more about the options available in CO2.js.`\n      );\n    }\n\n    // This flag checks to see if the model itself has a rating system.\n    const allowRatings = !!this.model.allowRatings;\n\n    /** @private */\n    this._segment = options?.results === \"segment\";\n    // This flag is set by the user to enable the rating system.\n    this._rating = options?.rating === true;\n\n    // The rating system is only supported in the Sustainable Web Design Model.\n    if (!allowRatings && this._rating) {\n      throw new Error(\n        `The rating system is not supported in the model you are using. Try using the Sustainable Web Design model instead.\\nSee https://developers.thegreenwebfoundation.org/co2js/models/ to learn more about the models available in CO2.js.`\n      );\n    }\n  }\n\n  /**\n   * Accept a figure in bytes for data transfer, and a boolean for whether\n   * the domain shows as 'green', and return a CO2 figure for energy used to shift the corresponding\n   * the data transfer.\n   *\n   * @param {number} bytes\n   * @param {boolean} green\n   * @return {number|CO2EstimateComponentsPerByte} the amount of CO2 in grammes or its separate components\n   */\n  perByte(bytes, green = false) {\n    return this.model.perByte(bytes, green, this._segment, this._rating);\n  }\n\n  /**\n   * Accept a figure in bytes for data transfer, and a boolean for whether\n   * the domain shows as 'green', and return a CO2 figure for energy used to shift the corresponding\n   * the data transfer.\n   *\n   * @param {number} bytes\n   * @param {boolean} green\n   * @return {number|CO2EstimateComponentsPerVisit} the amount of CO2 in grammes or its separate components\n   */\n  perVisit(bytes, green = false) {\n    if (this.model?.perVisit) {\n      return this.model.perVisit(bytes, green, this._segment, this._rating);\n    } else {\n      throw new Error(\n        `The perVisit() method is not supported in the model you are using. Try using perByte() instead.\\nSee https://developers.thegreenwebfoundation.org/co2js/methods/ to learn more about the methods available in CO2.js.`\n      );\n    }\n  }\n\n  /**\n   * Accept a figure in bytes for data transfer, a boolean for whether\n   * the domain shows as 'green', and an options object.\n   * Returns an object containing CO2 figure, green boolean, and object of the variables used in calculating the CO2 figure.\n   *\n   * @param {number} bytes\n   * @param {boolean} green\n   * @param {Object} options\n   * @return {CO2EstimateTraceResultPerByte} the amount of CO2 in grammes\n   */\n  perByteTrace(bytes, green = false, options = {}) {\n    const adjustments = parseByteTraceOptions(\n      options,\n      this.model.version,\n      green\n    );\n\n    // Filter out the trace items that aren't relevant to this function.\n    const { gridIntensity, ...traceVariables } = adjustments;\n    const {\n      dataReloadRatio,\n      firstVisitPercentage,\n      returnVisitPercentage,\n      ...otherVariables\n    } = traceVariables;\n    return {\n      co2: this.model.perByte(\n        bytes,\n        green,\n        this._segment,\n        this._rating,\n        adjustments\n      ),\n      green,\n      variables: {\n        description:\n          \"Below are the variables used to calculate this CO2 estimate.\",\n        bytes,\n        gridIntensity: {\n          description:\n            \"The grid intensity (grams per kilowatt-hour) used to calculate this CO2 estimate.\",\n          ...adjustments.gridIntensity,\n        },\n        ...otherVariables,\n      },\n    };\n  }\n\n  /**\n   * Accept a figure in bytes for data transfer, a boolean for whether\n   * the domain shows as 'green', and an options object.\n   * Returns an object containing CO2 figure, green boolean, and object of the variables used in calculating the CO2 figure.\n   *\n   * @param {number} bytes\n   * @param {boolean} green\n   * @param {Object} options\n   * @return {CO2EstimateTraceResultPerVisit} the amount of CO2 in grammes\n   */\n  perVisitTrace(bytes, green = false, options = {}) {\n    if (this.model?.perVisit) {\n      const adjustments = parseVisitTraceOptions(\n        options,\n        this.model.version,\n        green\n      );\n      const { gridIntensity, ...variables } = adjustments;\n\n      return {\n        co2: this.model.perVisit(\n          bytes,\n          green,\n          this._segment,\n          this._rating,\n          adjustments\n        ),\n        green,\n        variables: {\n          description:\n            \"Below are the variables used to calculate this CO2 estimate.\",\n          bytes,\n          gridIntensity: {\n            description:\n              \"The grid intensity (grams per kilowatt-hour) used to calculate this CO2 estimate.\",\n            ...adjustments.gridIntensity,\n          },\n          ...variables,\n        },\n      };\n    } else {\n      throw new Error(\n        `The perVisitTrace() method is not supported in the model you are using. Try using perByte() instead.\\nSee https://developers.thegreenwebfoundation.org/co2js/methods/ to learn more about the methods available in CO2.js.`\n      );\n    }\n  }\n\n  SustainableWebDesignV3() {\n    return new SustainableWebDesignV3();\n  }\n\n  SustainableWebDesignV4() {\n    return new SustainableWebDesignV4();\n  }\n\n  OneByte() {\n    return new OneByte();\n  }\n}\n\nexport { CO2 };\nexport default CO2;\n"],
  "mappings": "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",
  "names": ["SustainableWebDesignV3", "OneByte", "SustainableWebDesignV4"]
}
